#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""

import unittest
from datetime import datetime, timedelta
from reminder_bot import ReminderBot
from database import NotificationMethod, ReminderStatus
import tempfile
import os

class TestReminderBot(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.test_db = tempfile.NamedTemporaryFile(delete=False)
        os.environ['DATABASE_URL'] = f'sqlite:///{self.test_db.name}'
        
        self.bot = ReminderBot()
        self.bot.initialize_database()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.test_db.close()
        os.unlink(self.test_db.name)
    
    def test_add_user(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = self.bot.add_user("–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "test@example.com")
        self.assertIsInstance(user_id, int)
        self.assertGreater(user_id, 0)
    
    def test_add_reminder(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = self.bot.add_user("–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder_time = datetime.now() + timedelta(minutes=5)
        reminder_id = self.bot.add_reminder(
            user_id=user_id,
            title="–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            message="–≠—Ç–æ —Ç–µ—Å—Ç",
            reminder_time=reminder_time,
            notification_method=NotificationMethod.CONSOLE
        )
        
        self.assertIsInstance(reminder_id, int)
        self.assertGreater(reminder_id, 0)
    
    def test_get_pending_reminders(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_id = self.bot.add_user("–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        reminder_time = datetime.now() - timedelta(minutes=1)  # –í –ø—Ä–æ—à–ª–æ–º
        
        self.bot.add_reminder(
            user_id=user_id,
            title="–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            message="–≠—Ç–æ —Ç–µ—Å—Ç",
            reminder_time=reminder_time
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        pending = self.bot.db_manager.get_pending_reminders()
        self.assertEqual(len(pending), 1)
        self.assertEqual(pending[0].title, "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

def run_demo():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    print("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–û–¢–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –¥–µ–º–æ
    import tempfile
    test_db = tempfile.NamedTemporaryFile(delete=False)
    os.environ['DATABASE_URL'] = f'sqlite:///{test_db.name}'
    
    try:
        bot = ReminderBot()
        bot.initialize_database()
        
        print("1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        user1_id = bot.add_user("–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1", "demo1@example.com")
        user2_id = bot.add_user("–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2", telegram_id="@demo2")
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 ID: {user1_id}")
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 ID: {user2_id}")
        
        print("\n2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        now = datetime.now()
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º (–¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É)
        reminder1_id = bot.add_reminder(
            user_id=user1_id,
            title="–°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            message="–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É",
            reminder_time=now - timedelta(seconds=10),
            notification_method=NotificationMethod.CONSOLE
        )
        
        # –ë—É–¥—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder2_id = bot.add_reminder(
            user_id=user2_id,
            title="–ë—É–¥—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            message="–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥",
            reminder_time=now + timedelta(seconds=30),
            notification_method=NotificationMethod.CONSOLE
        )
        
        print(f"   ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1 ID: {reminder1_id}")
        print(f"   ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 2 ID: {reminder2_id}")
        
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        bot.check_and_send_reminders()
        
        print("\n4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        pending = bot.db_manager.get_pending_reminders()
        print(f"   üìã –û–∂–∏–¥–∞—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(pending)}")
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        test_db.close()
        os.unlink(test_db.name)

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "demo":
        run_demo()
    else:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        unittest.main()